[build-system]
# Specifies that setuptools is used to build the package
requires = ["setuptools>=61.0"] # Use a reasonably modern version of setuptools
build-backend = "setuptools.build_meta"

[project]
# Core project metadata (mostly replaces setup() arguments)
name = "rocket"
# Use dynamic versioning to read from your VERSION file
dynamic = ["version"]
description = "Refining Openfold predictions with Crystallographic Likelihood Targets"
readme = "README.md" # Assuming you have a README.md, otherwise adjust or remove
requires-python = ">=3.10" # Specify your minimum supported Python version, adjust if needed
license = { file = "LICENSE" } 
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
keywords = ["bioinformatics", "protein structure", "openfold", "crystallography", "refinement"] # Optional: Add relevant keywords
classifiers = [ # Optional: PyPI classifiers, see https://pypi.org/classifiers/
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "scikit-bio",
    "ruff",
    "loguru",
    "SFcalculator-torch>=0.2.2",
    "matplotlib",
    "polyleven",
    "scikit-learn",
    "seaborn",
]

[project.urls]
Homepage = "https://github.com/alisiafadini/ROCKET"
Repository = "https://github.com/alisiafadini/ROCKET"

[project.scripts]
"rk.predict" = "rocket.scripts.run_pretrained_openfold:cli_runopenfold"
"rk.preprocess" = "rocket.scripts.run_preprocess:cli_runpreprocess"
"rk.refine" = "rocket.scripts.run_refine:cli_runrefine"
"rk.config" = "rocket.scripts.run_config:cli_runconfig"
"rk.mse" = "rocket.scripts.run_mse:run_mse_all_datasets"
"rk.msacluster" = "rocket.scripts.run_msacluster:main"
"rk.score" = "rocket.scripts.run_msascore:main"
"rk.plddt" = "rocket.scripts.run_plddtoptimize:main"

[tool.setuptools.dynamic]
version = { file = "rocket/VERSION" }

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests*"] # Exclude tests from the installed package

# --- Ruff Linting Configuration ---
[tool.ruff]
target-version = "py310"

# Set the maximum line length. 88 is common (used by Black).
line-length = 88

# Exclude directories or files from linting.
# Common examples include virtual environments, build artifacts, etc.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "*.egg-info",
    "**/archived_scripts"
]

[tool.ruff.lint]
# Select the rule sets you want to enable.
# A good starting point includes:
# E/W: pycodestyle errors/warnings (style)
# F: Pyflakes (logical errors like unused imports/variables)
# I: isort (import sorting)
# UP: pyupgrade (suggests modern Python syntax)
# B: flake8-bugbear (finds potential bugs and design problems)
# C4: flake8-comprehensions (helps write better comprehensions)
# SIM: flake8-simplify (simplification suggestions)
select = ["E", "W", "F", "I", "UP", "B", "C4", "SIM"]

# Optionally ignore specific rules if they conflict with your style or needs.
# Example: ignore = ["E501"] # To ignore line length errors if you don't want to enforce it strictly yet.
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["rocket"] # Tell isort that 'rocket' is your own package

[tool.ruff.format]
# Use preview features for the latest stable formatting behavior (recommended)
preview = true

# Choose your preferred quote style (double is Black-compatible)
quote-style = "double"

# Use spaces for indentation (standard)
indent-style = "space"

# Respect magic trailing commas (like Black) - helps reduce diff noise
skip-magic-trailing-comma = false

# Auto-detect line endings (usually best)
line-ending = "auto"

[tool.mypy]
ignore_missing_imports = true
strict = true